{"name":"Notify-js","tagline":"A simple notification message bus for things that will happen or already did","body":"notify-js [![build status](https://secure.travis-ci.org/WebReflection/notify-js.svg)](http://travis-ci.org/WebReflection/notify-js)\r\n=========\r\nA simplified notification channel for global, or local, interaction.\r\n\r\nIn case of doubts, please read the [related blog entry](https://www.webreflection.co.uk/blog/2015/08/14/the-line-between-events-and-promises).\r\n\r\n\r\n### API\r\nThere are 4 methods, described as such:\r\n\r\n  * `notify.when(type, callback)` to add a listener associated to a specific type/event. If such type was already resolved, it will synchronously invoke the callback.\r\n  * `notify.about(type, any1[, any2[, ...]])` resolves a type or returns a callback used to resolve the `type` with received arguments, once executed ( see examples )\r\n  * `notify.drop(type, callback)` in case something hasn't happened yet and we changed our mind about waiting for the event, we can still remove it!\r\n  * `notify.new()` create a new `notify`-like object. By default, `notify` is a global communication channel, but it brings this simple method that will create a new object for private communication purpose, if needed.\r\n\r\nIn order to use private channels, feel free to create unique IDs as type, or simply use a `Symbol`, whenever available.\r\n\r\n\r\n#### Examples\r\n```js\r\n// assuming \"data\" event hasn't happened yet\r\nnotify.when(\"data\", function (data) {\r\n  console.log(data);\r\n});\r\n\r\n// whenever it will happen, resolve via {any:'value'}\r\nnotify.about(\"data\", {any:'value'});\r\n// all listeners waiting for it, will be triggered\r\n\r\n\r\n// what if you add a listener after the `.about` call?\r\nnotify.when(\"data\", function (data) {\r\n  console.log('yep, instantly called!', data);\r\n  // data will be exactly {any:'value'}\r\n});\r\n\r\n\r\n// what if we redefine data ?\r\nnotify.about(\"data\", {another:'value'});\r\n// from now on, whoever will ask `.when` data\r\n// the value will be the updated one\r\n// but every listener already fired and satisfied\r\n// will be simply ignored\r\n\r\n\r\n// what if I want to be sure the channel is private?\r\n// feel free to use a Symbol as channel\r\nvar myPrivateSymbol = Symbol();\r\nnotify.when(myPrivateSymbol, ...);\r\n\r\n// otherwise create a new notify like variable\r\nvar privateNotify = notify.new();\r\n```\r\n\r\nIt is also possible to use `.about(type)` in order to generate a callback\r\nthat once invoked will resolve the type.\r\n\r\nExample\r\n```js\r\nvar fs = require('fs');\r\nvar notify = require('notify-js');\r\n\r\n\r\n// before or after, it doesn't matter\r\nnotify.when('config-available', function (err, content) {\r\n  if (err) console.warn('damn it');\r\n  else console.log(content);\r\n});\r\n\r\n\r\n// at any time in the past, present, or future\r\nfs.readFile(\r\n  'config.json',\r\n  notify.about('config-available')\r\n);\r\n```\r\n\r\nWhenever the last `notify.about` will be executed, all listeners waiting for it will be triggered.\r\n\r\n\r\n## Which file ?\r\nBrowsers could use [the minified version](https://github.com/WebReflection/notify-js/blob/master/build/notify-js.js), otherwise there is a [node module](https://github.com/WebReflection/notify-js/blob/master/build/notify-js.node.js)\r\nwhich is also available via npm as `npm install notify-js`.\r\n\r\n\r\n\r\n### Compatibility\r\nNotify has been created in a full cross platform, browser, engine way, and it's compatible down to IE6 on Desktop, and every mobile browser I could test.\r\n\r\nIf it wasn't for [this Espruino bug](https://github.com/espruino/Espruino/issues/561) it would have worked in there too.\r\n\r\nThere is a [live test page](http://webreflection.github.io/notify-js/test/) which, if green, would indicate everything is fine.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}